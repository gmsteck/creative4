{"remainingRequest":"/root/dev/creative3/node_modules/babel-loader/lib/index.js!/root/dev/creative3/node_modules/eslint-loader/index.js??ref--14-0!/root/dev/creative3/src/graph.js","dependencies":[{"path":"/root/dev/creative3/src/graph.js","mtime":1636357893332},{"path":"/root/dev/creative3/babel.config.js","mtime":1636195574980},{"path":"/root/dev/creative3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/dev/creative3/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/root/dev/creative3/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvcm9vdC9kZXYvY3JlYXRpdmUzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL3Jvb3QvZGV2L2NyZWF0aXZlMy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0IHsgUHJpb3JpdHlRdWV1ZSB9IGZyb20gIi4vcHJpb3JpdHlRdWV1ZS5qcyI7CmV4cG9ydCB2YXIgR3JhcGggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEdyYXBoKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyYXBoKTsKCiAgICB0aGlzLmVkZ2VzID0ge307CiAgICB0aGlzLm5vZGVzID0gW107CiAgfQoKICBfY3JlYXRlQ2xhc3MoR3JhcGgsIFt7CiAgICBrZXk6ICJhZGROb2RlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGROb2RlKG5vZGUpIHsKICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5vZGUpOwogICAgICB0aGlzLmVkZ2VzW25vZGVdID0gW107CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkRWRnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRWRnZShub2RlMSwgbm9kZTIpIHsKICAgICAgdmFyIHdlaWdodCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTsKICAgICAgdGhpcy5lZGdlc1tub2RlMV0ucHVzaCh7CiAgICAgICAgbm9kZTogbm9kZTIsCiAgICAgICAgd2VpZ2h0OiB3ZWlnaHQKICAgICAgfSk7CiAgICAgIHRoaXMuZWRnZXNbbm9kZTJdLnB1c2goewogICAgICAgIG5vZGU6IG5vZGUxLAogICAgICAgIHdlaWdodDogd2VpZ2h0CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImRpc3BsYXkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BsYXkoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZ3JhcGggPSAiIjsKICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgZ3JhcGggKz0gbm9kZSArICItPiIgKyBfdGhpcy5lZGdlc1tub2RlXS5tYXAoZnVuY3Rpb24gKG4pIHsKICAgICAgICAgIHJldHVybiBuLm5vZGU7CiAgICAgICAgfSkuam9pbigiLCAiKSArICJcbiI7CiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyhncmFwaCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJpbXNNU1QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByaW1zTVNUKHN0YXJ0U3RhdGUpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAvLyBJbml0aWFsaXplIGdyYXBoIHRoYXQnbGwgY29udGFpbiB0aGUgTVNUCiAgICAgIHZhciBNU1QgPSBuZXcgR3JhcGgoKTsKCiAgICAgIGlmICh0aGlzLm5vZGVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHJldHVybiBNU1Q7CiAgICAgIH0KCiAgICAgIHZhciBzID0gdGhpcy5ub2Rlc1swXTsgLy8gU2VsZWN0IGZpcnN0IG5vZGUgYXMgc3RhcnRpbmcgbm9kZQoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMubm9kZXNbaV0gPT0gc3RhcnRTdGF0ZSkgewogICAgICAgICAgcyA9IHRoaXMubm9kZXNbaV07CiAgICAgICAgfQogICAgICB9IC8vIENyZWF0ZSBhIFByaW9yaXR5IFF1ZXVlIGFuZCBleHBsb3JlZCBzZXQKCgogICAgICB2YXIgZWRnZVF1ZXVlID0gbmV3IFByaW9yaXR5UXVldWUodGhpcy5ub2Rlcy5sZW5ndGggKiB0aGlzLm5vZGVzLmxlbmd0aCk7CiAgICAgIHZhciBleHBsb3JlZCA9IG5ldyBTZXQoKTsKICAgICAgZXhwbG9yZWQuYWRkKHMpOwogICAgICBNU1QuYWRkTm9kZShzKTsgLy8gQWRkIGFsbCBlZGdlcyBmcm9tIHRoaXMgc3RhcnRpbmcgbm9kZSB0byB0aGUgUFEgdGFraW5nIHdlaWdodHMgYXMgcHJpb3JpdHkKCiAgICAgIHRoaXMuZWRnZXNbc10uZm9yRWFjaChmdW5jdGlvbiAoZWRnZSkgewogICAgICAgIGVkZ2VRdWV1ZS5lbnF1ZXVlKFtzLCBlZGdlLm5vZGVdLCBlZGdlLndlaWdodCk7CiAgICAgIH0pOyAvLyBUYWtlIHRoZSBzbWFsbGVzdCBlZGdlIGFuZCBhZGQgdGhhdCB0byB0aGUgbmV3IGdyYXBoCgogICAgICB2YXIgY3VycmVudE1pbkVkZ2UgPSBlZGdlUXVldWUuZGVxdWV1ZSgpOwoKICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7CiAgICAgICAgLy8gQ09udGludWUgcmVtb3ZpbmcgZWRnZXMgdGlsbCB3ZSBnZXQgYW4gZWRnZSB3aXRoIGFuIHVuZXhwbG9yZWQgbm9kZQogICAgICAgIHdoaWxlICghZWRnZVF1ZXVlLmlzRW1wdHkoKSAmJiBleHBsb3JlZC5oYXMoY3VycmVudE1pbkVkZ2UuZWxlbWVudFsxXSkpIHsKICAgICAgICAgIGN1cnJlbnRNaW5FZGdlID0gZWRnZVF1ZXVlLmRlcXVldWUoKTsKICAgICAgICB9CgogICAgICAgIHZhciBuZXh0Tm9kZSA9IGN1cnJlbnRNaW5FZGdlLmVsZW1lbnRbMV07IC8vIENoZWNrIGFnYWluIGFzIHF1ZXVlIG1pZ2h0IGdldCBlbXB0eSB3aXRob3V0IGdpdmluZyBiYWNrIHVuZXhwbG9yZWQgZWxlbWVudAoKICAgICAgICBpZiAoIWV4cGxvcmVkLmhhcyhuZXh0Tm9kZSkpIHsKICAgICAgICAgIE1TVC5hZGROb2RlKG5leHROb2RlKTsKICAgICAgICAgIE1TVC5hZGRFZGdlKGN1cnJlbnRNaW5FZGdlLmVsZW1lbnRbMF0sIG5leHROb2RlLCBjdXJyZW50TWluRWRnZS5wcmlvcml0eSk7IC8vIEFnYWluIGFkZCBhbGwgZWRnZXMgdG8gdGhlIFBRCgogICAgICAgICAgX3RoaXMyLmVkZ2VzW25leHROb2RlXS5mb3JFYWNoKGZ1bmN0aW9uIChlZGdlKSB7CiAgICAgICAgICAgIGVkZ2VRdWV1ZS5lbnF1ZXVlKFtuZXh0Tm9kZSwgZWRnZS5ub2RlXSwgZWRnZS53ZWlnaHQpOwogICAgICAgICAgfSk7IC8vIE1hcmsgdGhpcyBub2RlIGFzIGV4cGxvcmVkIGV4cGxvcmVkLmFkZChuZXh0Tm9kZSk7CgoKICAgICAgICAgIGV4cGxvcmVkLmFkZChuZXh0Tm9kZSk7CiAgICAgICAgICBzID0gbmV4dE5vZGU7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgd2hpbGUgKCFlZGdlUXVldWUuaXNFbXB0eSgpKSB7CiAgICAgICAgX2xvb3AoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIE1TVDsKICAgIH0KICB9XSk7CgogIHJldHVybiBHcmFwaDsKfSgpOw=="},{"version":3,"sources":["/root/dev/creative3/src/graph.js"],"names":["PriorityQueue","Graph","edges","nodes","node","push","node1","node2","weight","graph","forEach","map","n","join","console","log","startState","MST","length","s","i","edgeQueue","explored","Set","add","addNode","edge","enqueue","currentMinEdge","dequeue","isEmpty","has","element","nextNode","addEdge","priority"],"mappings":"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","sourcesContent":["import { PriorityQueue } from \"./priorityQueue.js\";\n\nexport class Graph {\n  constructor() {\n    this.edges = {};\n    this.nodes = [];\n  }\n\n  addNode(node) {\n    this.nodes.push(node);\n    this.edges[node] = [];\n  }\n\n  addEdge(node1, node2, weight = 1) {\n    this.edges[node1].push({ node: node2, weight: weight });\n    this.edges[node2].push({ node: node1, weight: weight });\n  }\n\n  display() {\n    let graph = \"\";\n    this.nodes.forEach((node) => {\n      graph +=\n        node + \"->\" + this.edges[node].map((n) => n.node).join(\", \") + \"\\n\";\n    });\n    console.log(graph);\n  }\n  primsMST(startState) {\n    // Initialize graph that'll contain the MST\n    const MST = new Graph();\n    if (this.nodes.length === 0) {\n      return MST;\n    }\n    let s = this.nodes[0];\n    // Select first node as starting node\n    for (let i = 0; i < this.nodes.length; i++) {\n      if (this.nodes[i] == startState) {\n        s = this.nodes[i];\n      }\n    }\n\n    // Create a Priority Queue and explored set\n    let edgeQueue = new PriorityQueue(this.nodes.length * this.nodes.length);\n    let explored = new Set();\n    explored.add(s);\n    MST.addNode(s);\n\n    // Add all edges from this starting node to the PQ taking weights as priority\n    this.edges[s].forEach((edge) => {\n      edgeQueue.enqueue([s, edge.node], edge.weight);\n    });\n\n    // Take the smallest edge and add that to the new graph\n    let currentMinEdge = edgeQueue.dequeue();\n    while (!edgeQueue.isEmpty()) {\n      // COntinue removing edges till we get an edge with an unexplored node\n      while (!edgeQueue.isEmpty() && explored.has(currentMinEdge.element[1])) {\n        currentMinEdge = edgeQueue.dequeue();\n      }\n      let nextNode = currentMinEdge.element[1];\n\n      // Check again as queue might get empty without giving back unexplored element\n      if (!explored.has(nextNode)) {\n        MST.addNode(nextNode);\n        MST.addEdge(\n          currentMinEdge.element[0],\n          nextNode,\n          currentMinEdge.priority\n        );\n        // Again add all edges to the PQ\n        this.edges[nextNode].forEach((edge) => {\n          edgeQueue.enqueue([nextNode, edge.node], edge.weight);\n        });\n\n        // Mark this node as explored explored.add(nextNode);\n        explored.add(nextNode);\n        s = nextNode;\n      }\n    }\n    return MST;\n  }\n}\n"]}]}