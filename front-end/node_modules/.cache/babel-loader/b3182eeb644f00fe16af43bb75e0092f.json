{"remainingRequest":"/root/dev/creative4/front-end/node_modules/babel-loader/lib/index.js!/root/dev/creative4/front-end/node_modules/cache-loader/dist/cjs.js??ref--1-0!/root/dev/creative4/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/root/dev/creative4/front-end/src/views/Itinerary.vue?vue&type=script&lang=js&","dependencies":[{"path":"/root/dev/creative4/front-end/src/views/Itinerary.vue","mtime":1638958491324},{"path":"/root/dev/creative4/front-end/babel.config.js","mtime":1638837174300},{"path":"/root/dev/creative4/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/dev/creative4/front-end/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/root/dev/creative4/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/dev/creative4/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IEl0aW5lcmFyeUxpc3QgZnJvbSAiLi4vY29tcG9uZW50cy9JdGluZXJhcnlMaXN0LnZ1ZSI7CmltcG9ydCB7IEdyYXBoIH0gZnJvbSAiLi4vZ3JhcGguanMiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIiIsCiAgY29tcG9uZW50czogewogICAgSXRpbmVyYXJ5TGlzdDogSXRpbmVyYXJ5TGlzdAogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNvdW50cnk6ICIiLAogICAgICBwYXJrT3JkZXI6IFtdLAogICAgICBzdGFydFN0YXRlOiAiIiwKICAgICAgc2VhcmNoVGV4dDogIiIKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgLypwYXJrcygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHJvb3QuJGRhdGEucGFya0xpc3Q7CiAgICB9LCovCiAgfSwKICBtZXRob2RzOiB7CiAgICBkaXN0YW5jZTogZnVuY3Rpb24gZGlzdGFuY2UobGF0MSwgbGF0MiwgbG9uMSwgbG9uMikgewogICAgICAvLyBUaGUgbWF0aCBtb2R1bGUgY29udGFpbnMgYSBmdW5jdGlvbgogICAgICAvLyBuYW1lZCB0b1JhZGlhbnMgd2hpY2ggY29udmVydHMgZnJvbQogICAgICAvLyBkZWdyZWVzIHRvIHJhZGlhbnMuCiAgICAgIGxvbjEgPSBsb24xICogTWF0aC5QSSAvIDE4MDsKICAgICAgbG9uMiA9IGxvbjIgKiBNYXRoLlBJIC8gMTgwOwogICAgICBsYXQxID0gbGF0MSAqIE1hdGguUEkgLyAxODA7CiAgICAgIGxhdDIgPSBsYXQyICogTWF0aC5QSSAvIDE4MDsgLy8gSGF2ZXJzaW5lIGZvcm11bGEKCiAgICAgIHZhciBkbG9uID0gbG9uMiAtIGxvbjE7CiAgICAgIHZhciBkbGF0ID0gbGF0MiAtIGxhdDE7CiAgICAgIHZhciBhID0gTWF0aC5wb3coTWF0aC5zaW4oZGxhdCAvIDIpLCAyKSArIE1hdGguY29zKGxhdDEpICogTWF0aC5jb3MobGF0MikgKiBNYXRoLnBvdyhNYXRoLnNpbihkbG9uIC8gMiksIDIpOwogICAgICB2YXIgYyA9IDIgKiBNYXRoLmFzaW4oTWF0aC5zcXJ0KGEpKTsgLy8gUmFkaXVzIG9mIGVhcnRoIGluIGtpbG9tZXRlcnMuIFVzZSAzOTU2CiAgICAgIC8vIGZvciBtaWxlcwoKICAgICAgdmFyIHIgPSA2MzcxOyAvLyBjYWxjdWxhdGUgdGhlIHJlc3VsdAoKICAgICAgcmV0dXJuIGMgKiByOwogICAgfSwKICAgIGNyZWF0ZVRyZWU6IGZ1bmN0aW9uIGNyZWF0ZVRyZWUoKSB7CiAgICAgIGNvbnNvbGUubG9nKCJmdW5jdGlvbiBoYXMgYmVlbiBjYWxsZWQiKTsKICAgICAgdGhpcy5zdGFydFN0YXRlID0gdGhpcy5zZWFyY2hUZXh0OwogICAgICB2YXIgZyA9IG5ldyBHcmFwaCgpOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMuJHJvb3QuJGRhdGEucGFya0xpc3RbaV0uTmFtZSA9PSB0aGlzLnN0YXJ0U3RhdGUpIHsKICAgICAgICAgIGcuYWRkTm9kZSh0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0W2ldLk5hbWUpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMuJHJvb3QuJGRhdGEucGFya0xpc3QubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgaWYgKHRoaXMuJHJvb3QuJGRhdGEucGFya0xpc3RbX2ldLk5hbWUgIT0gdGhpcy5zdGFydFN0YXRlKSB7CiAgICAgICAgICBnLmFkZE5vZGUodGhpcy4kcm9vdC4kZGF0YS5wYXJrTGlzdFtfaV0uTmFtZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0Lmxlbmd0aDsgX2kyKyspIHsKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuJHJvb3QuJGRhdGEucGFya0xpc3QubGVuZ3RoOyBqKyspIHsKICAgICAgICAgIGlmICh0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0W19pMl0uTmFtZSAhPSB0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0W2pdLk5hbWUpIHsKICAgICAgICAgICAgZy5hZGRFZGdlKHRoaXMuJHJvb3QuJGRhdGEucGFya0xpc3RbX2kyXS5OYW1lLCB0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0W2pdLk5hbWUsIHRoaXMuZGlzdGFuY2UodGhpcy4kcm9vdC4kZGF0YS5wYXJrTGlzdFtfaTJdLkxhdGl0dWRlLCB0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0W2pdLkxhdGl0dWRlLCB0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0W19pMl0uTG9uZ2l0dWRlLCB0aGlzLiRyb290LiRkYXRhLnBhcmtMaXN0W2pdLkxvbmdpdHVkZSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgY29uc29sZS5sb2coInByaW0ncyBhbGdvcml0aG0gaXMgY2FsbGVkIik7CiAgICAgIHRoaXMucGFya09yZGVyID0gZy5wcmltc01TVCh0aGlzLnN0YXJ0U3RhdGUpLm5vZGVzOwogICAgICBjb25zb2xlLmxvZygicHJpbSdzIGFsZ29yaXRobSBpcyBzdWNjZWVkcyIpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["Itinerary.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <p class=\"none\" v-if=\"this.$root.$data.parkList.length === 0\">\n      No Parks in Itinerary\n    </p>\n    <ItineraryList />\n    <div v-show=\"this.$root.$data.parkList.length > 1\">\n      <h2>\n        Enter a starting park to calculate the shortest route between all the\n        parks on your list!\n      </h2>\n      <div class=\"wrapper\">\n        <div class=\"search\">\n          <div class=\"pure-form\">\n            <i class=\"fas fa-search\"></i\n            ><input\n              v-model=\"searchText\"\n              placeholder=\"Enter the park you want to start from (case sensitive!)\"\n            />\n          </div>\n        </div>\n      </div>\n      <form @submit.prevent=\"createTree\">\n        <button type=\"submit\">\n          Find shortest path through the national parks\n        </button>\n      </form>\n      <div v-if=\"this.parkOrder.length > 1\">\n        <div v-for=\"park in parkOrder\" :key=\"park\">\n          <p>{{ park }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ItineraryList from \"../components/ItineraryList.vue\";\nimport { Graph } from \"../graph.js\";\nexport default {\n  name: \"\",\n  components: {\n    ItineraryList,\n  },\n  data() {\n    return {\n      country: \"\",\n      parkOrder: [],\n      startState: \"\",\n      searchText: \"\",\n    };\n  },\n  computed: {\n    /*parks() {\n      return this.$root.$data.parkList;\n    },*/\n  },\n  methods: {\n    distance(lat1, lat2, lon1, lon2) {\n      // The math module contains a function\n      // named toRadians which converts from\n      // degrees to radians.\n      lon1 = (lon1 * Math.PI) / 180;\n      lon2 = (lon2 * Math.PI) / 180;\n      lat1 = (lat1 * Math.PI) / 180;\n      lat2 = (lat2 * Math.PI) / 180;\n\n      // Haversine formula\n      let dlon = lon2 - lon1;\n      let dlat = lat2 - lat1;\n      let a =\n        Math.pow(Math.sin(dlat / 2), 2) +\n        Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);\n\n      let c = 2 * Math.asin(Math.sqrt(a));\n\n      // Radius of earth in kilometers. Use 3956\n      // for miles\n      let r = 6371;\n\n      // calculate the result\n      return c * r;\n    },\n    createTree() {\n      console.log(\"function has been called\");\n      this.startState = this.searchText;\n      let g = new Graph();\n      for (let i = 0; i < this.$root.$data.parkList.length; i++) {\n        if (this.$root.$data.parkList[i].Name == this.startState) {\n          g.addNode(this.$root.$data.parkList[i].Name);\n        }\n      }\n      for (let i = 0; i < this.$root.$data.parkList.length; i++) {\n        if (this.$root.$data.parkList[i].Name != this.startState) {\n          g.addNode(this.$root.$data.parkList[i].Name);\n        }\n      }\n      for (let i = 0; i < this.$root.$data.parkList.length; i++) {\n        for (let j = 0; j < this.$root.$data.parkList.length; j++) {\n          if (\n            this.$root.$data.parkList[i].Name !=\n            this.$root.$data.parkList[j].Name\n          ) {\n            g.addEdge(\n              this.$root.$data.parkList[i].Name,\n              this.$root.$data.parkList[j].Name,\n              this.distance(\n                this.$root.$data.parkList[i].Latitude,\n                this.$root.$data.parkList[j].Latitude,\n                this.$root.$data.parkList[i].Longitude,\n                this.$root.$data.parkList[j].Longitude\n              )\n            );\n          }\n        }\n      }\n      console.log(\"prim's algorithm is called\");\n      this.parkOrder = g.primsMST(this.startState).nodes;\n      console.log(\"prim's algorithm is succeeds\");\n    },\n  },\n};\n</script>\n\n<style>\n.none {\n  text-align: center;\n  font-size: 32px;\n}\n.wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 10px;\n}\n\n.search {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  width: 50%;\n}\n\nform {\n  display: table;\n  width: 100%;\n}\n\ni {\n  display: table-cell;\n  padding-left: 10px;\n  width: 1px;\n}\n\ninput {\n  display: table-cell;\n  font-size: 20px;\n  border: none !important;\n  box-shadow: none !important;\n  width: 100%;\n  height: 40px;\n}\nbutton {\n  height: 50px;\n  background: rgb(68, 68, 68);\n  color: white;\n  border: none;\n  border-radius: 2%;\n}\n\nbutton:hover {\n  height: 50px;\n  background: rgb(48, 48, 48);\n  color: white;\n  border: none;\n  border-radius: 2%;\n}\n\nbutton:active {\n  height: 50px;\n  background: #000;\n  color: white;\n  border: none;\n  -webkit-box-shadow: inset 0px 0px 5px #c1c1c1;\n  -moz-box-shadow: inset 0px 0px 5px #c1c1c1;\n  box-shadow: inset 0px 0px 5px #c1c1c1;\n}\n</style>\n"],"sourceRoot":"src/views"}]}