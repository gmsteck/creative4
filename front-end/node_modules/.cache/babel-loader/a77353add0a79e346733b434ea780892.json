{"remainingRequest":"/root/dev/creative4/front-end/node_modules/babel-loader/lib/index.js!/root/dev/creative4/front-end/node_modules/eslint-loader/index.js??ref--14-0!/root/dev/creative4/front-end/src/graph.js","dependencies":[{"path":"/root/dev/creative4/front-end/src/graph.js","mtime":1638837187440},{"path":"/root/dev/creative4/front-end/babel.config.js","mtime":1638837174300},{"path":"/root/dev/creative4/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/dev/creative4/front-end/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/root/dev/creative4/front-end/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvcm9vdC9kZXYvY3JlYXRpdmU0L2Zyb250LWVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9yb290L2Rldi9jcmVhdGl2ZTQvZnJvbnQtZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCB7IFByaW9yaXR5UXVldWUgfSBmcm9tICIuL3ByaW9yaXR5UXVldWUuanMiOwpleHBvcnQgdmFyIEdyYXBoID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBHcmFwaCgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHcmFwaCk7CgogICAgdGhpcy5lZGdlcyA9IHt9OwogICAgdGhpcy5ub2RlcyA9IFtdOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEdyYXBoLCBbewogICAga2V5OiAiYWRkTm9kZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTm9kZShub2RlKSB7CiAgICAgIHRoaXMubm9kZXMucHVzaChub2RlKTsKICAgICAgdGhpcy5lZGdlc1tub2RlXSA9IFtdOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZEVkZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEVkZ2Uobm9kZTEsIG5vZGUyKSB7CiAgICAgIHZhciB3ZWlnaHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7CiAgICAgIHRoaXMuZWRnZXNbbm9kZTFdLnB1c2goewogICAgICAgIG5vZGU6IG5vZGUyLAogICAgICAgIHdlaWdodDogd2VpZ2h0CiAgICAgIH0pOwogICAgICB0aGlzLmVkZ2VzW25vZGUyXS5wdXNoKHsKICAgICAgICBub2RlOiBub2RlMSwKICAgICAgICB3ZWlnaHQ6IHdlaWdodAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkaXNwbGF5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwbGF5KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGdyYXBoID0gIiI7CiAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkgewogICAgICAgIGdyYXBoICs9IG5vZGUgKyAiLT4iICsgX3RoaXMuZWRnZXNbbm9kZV0ubWFwKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICByZXR1cm4gbi5ub2RlOwogICAgICAgIH0pLmpvaW4oIiwgIikgKyAiXG4iOwogICAgICB9KTsKICAgICAgY29uc29sZS5sb2coZ3JhcGgpOwogICAgfQogIH0sIHsKICAgIGtleTogInByaW1zTVNUIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmltc01TVChzdGFydFN0YXRlKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgLy8gSW5pdGlhbGl6ZSBncmFwaCB0aGF0J2xsIGNvbnRhaW4gdGhlIE1TVAogICAgICB2YXIgTVNUID0gbmV3IEdyYXBoKCk7CgogICAgICBpZiAodGhpcy5ub2Rlcy5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gTVNUOwogICAgICB9CgogICAgICB2YXIgcyA9IHRoaXMubm9kZXNbMF07IC8vIFNlbGVjdCBmaXJzdCBub2RlIGFzIHN0YXJ0aW5nIG5vZGUKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ub2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0aGlzLm5vZGVzW2ldID09IHN0YXJ0U3RhdGUpIHsKICAgICAgICAgIHMgPSB0aGlzLm5vZGVzW2ldOwogICAgICAgIH0KICAgICAgfSAvLyBDcmVhdGUgYSBQcmlvcml0eSBRdWV1ZSBhbmQgZXhwbG9yZWQgc2V0CgoKICAgICAgdmFyIGVkZ2VRdWV1ZSA9IG5ldyBQcmlvcml0eVF1ZXVlKHRoaXMubm9kZXMubGVuZ3RoICogdGhpcy5ub2Rlcy5sZW5ndGgpOwogICAgICB2YXIgZXhwbG9yZWQgPSBuZXcgU2V0KCk7CiAgICAgIGV4cGxvcmVkLmFkZChzKTsKICAgICAgTVNULmFkZE5vZGUocyk7IC8vIEFkZCBhbGwgZWRnZXMgZnJvbSB0aGlzIHN0YXJ0aW5nIG5vZGUgdG8gdGhlIFBRIHRha2luZyB3ZWlnaHRzIGFzIHByaW9yaXR5CgogICAgICB0aGlzLmVkZ2VzW3NdLmZvckVhY2goZnVuY3Rpb24gKGVkZ2UpIHsKICAgICAgICBlZGdlUXVldWUuZW5xdWV1ZShbcywgZWRnZS5ub2RlXSwgZWRnZS53ZWlnaHQpOwogICAgICB9KTsgLy8gVGFrZSB0aGUgc21hbGxlc3QgZWRnZSBhbmQgYWRkIHRoYXQgdG8gdGhlIG5ldyBncmFwaAoKICAgICAgdmFyIGN1cnJlbnRNaW5FZGdlID0gZWRnZVF1ZXVlLmRlcXVldWUoKTsKCiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkgewogICAgICAgIC8vIENPbnRpbnVlIHJlbW92aW5nIGVkZ2VzIHRpbGwgd2UgZ2V0IGFuIGVkZ2Ugd2l0aCBhbiB1bmV4cGxvcmVkIG5vZGUKICAgICAgICB3aGlsZSAoIWVkZ2VRdWV1ZS5pc0VtcHR5KCkgJiYgZXhwbG9yZWQuaGFzKGN1cnJlbnRNaW5FZGdlLmVsZW1lbnRbMV0pKSB7CiAgICAgICAgICBjdXJyZW50TWluRWRnZSA9IGVkZ2VRdWV1ZS5kZXF1ZXVlKCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgbmV4dE5vZGUgPSBjdXJyZW50TWluRWRnZS5lbGVtZW50WzFdOyAvLyBDaGVjayBhZ2FpbiBhcyBxdWV1ZSBtaWdodCBnZXQgZW1wdHkgd2l0aG91dCBnaXZpbmcgYmFjayB1bmV4cGxvcmVkIGVsZW1lbnQKCiAgICAgICAgaWYgKCFleHBsb3JlZC5oYXMobmV4dE5vZGUpKSB7CiAgICAgICAgICBNU1QuYWRkTm9kZShuZXh0Tm9kZSk7CiAgICAgICAgICBNU1QuYWRkRWRnZShjdXJyZW50TWluRWRnZS5lbGVtZW50WzBdLCBuZXh0Tm9kZSwgY3VycmVudE1pbkVkZ2UucHJpb3JpdHkpOyAvLyBBZ2FpbiBhZGQgYWxsIGVkZ2VzIHRvIHRoZSBQUQoKICAgICAgICAgIF90aGlzMi5lZGdlc1tuZXh0Tm9kZV0uZm9yRWFjaChmdW5jdGlvbiAoZWRnZSkgewogICAgICAgICAgICBlZGdlUXVldWUuZW5xdWV1ZShbbmV4dE5vZGUsIGVkZ2Uubm9kZV0sIGVkZ2Uud2VpZ2h0KTsKICAgICAgICAgIH0pOyAvLyBNYXJrIHRoaXMgbm9kZSBhcyBleHBsb3JlZCBleHBsb3JlZC5hZGQobmV4dE5vZGUpOwoKCiAgICAgICAgICBleHBsb3JlZC5hZGQobmV4dE5vZGUpOwogICAgICAgICAgcyA9IG5leHROb2RlOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIHdoaWxlICghZWRnZVF1ZXVlLmlzRW1wdHkoKSkgewogICAgICAgIF9sb29wKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBNU1Q7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gR3JhcGg7Cn0oKTs="},{"version":3,"sources":["/root/dev/creative4/front-end/src/graph.js"],"names":["PriorityQueue","Graph","edges","nodes","node","push","node1","node2","weight","graph","forEach","map","n","join","console","log","startState","MST","length","s","i","edgeQueue","explored","Set","add","addNode","edge","enqueue","currentMinEdge","dequeue","isEmpty","has","element","nextNode","addEdge","priority"],"mappings":"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","sourcesContent":["import { PriorityQueue } from \"./priorityQueue.js\";\n\nexport class Graph {\n  constructor() {\n    this.edges = {};\n    this.nodes = [];\n  }\n\n  addNode(node) {\n    this.nodes.push(node);\n    this.edges[node] = [];\n  }\n\n  addEdge(node1, node2, weight = 1) {\n    this.edges[node1].push({ node: node2, weight: weight });\n    this.edges[node2].push({ node: node1, weight: weight });\n  }\n\n  display() {\n    let graph = \"\";\n    this.nodes.forEach((node) => {\n      graph +=\n        node + \"->\" + this.edges[node].map((n) => n.node).join(\", \") + \"\\n\";\n    });\n    console.log(graph);\n  }\n  primsMST(startState) {\n    // Initialize graph that'll contain the MST\n    const MST = new Graph();\n    if (this.nodes.length === 0) {\n      return MST;\n    }\n    let s = this.nodes[0];\n    // Select first node as starting node\n    for (let i = 0; i < this.nodes.length; i++) {\n      if (this.nodes[i] == startState) {\n        s = this.nodes[i];\n      }\n    }\n\n    // Create a Priority Queue and explored set\n    let edgeQueue = new PriorityQueue(this.nodes.length * this.nodes.length);\n    let explored = new Set();\n    explored.add(s);\n    MST.addNode(s);\n\n    // Add all edges from this starting node to the PQ taking weights as priority\n    this.edges[s].forEach((edge) => {\n      edgeQueue.enqueue([s, edge.node], edge.weight);\n    });\n\n    // Take the smallest edge and add that to the new graph\n    let currentMinEdge = edgeQueue.dequeue();\n    while (!edgeQueue.isEmpty()) {\n      // COntinue removing edges till we get an edge with an unexplored node\n      while (!edgeQueue.isEmpty() && explored.has(currentMinEdge.element[1])) {\n        currentMinEdge = edgeQueue.dequeue();\n      }\n      let nextNode = currentMinEdge.element[1];\n\n      // Check again as queue might get empty without giving back unexplored element\n      if (!explored.has(nextNode)) {\n        MST.addNode(nextNode);\n        MST.addEdge(\n          currentMinEdge.element[0],\n          nextNode,\n          currentMinEdge.priority\n        );\n        // Again add all edges to the PQ\n        this.edges[nextNode].forEach((edge) => {\n          edgeQueue.enqueue([nextNode, edge.node], edge.weight);\n        });\n\n        // Mark this node as explored explored.add(nextNode);\n        explored.add(nextNode);\n        s = nextNode;\n      }\n    }\n    return MST;\n  }\n}\n"]}]}